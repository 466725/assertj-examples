/**
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * Copyright 2012-2013 the original author or authors.
 */
package org.assertj.examples.data;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;


/**
 * {@link BasketBallPlayer} specific assertions - Generated by CustomAssertionGenerator.
 */
public class BasketBallPlayerAssert extends AbstractAssert<BasketBallPlayerAssert, BasketBallPlayer> {

  /**
   * Creates a new </code>{@link BasketBallPlayerAssert}</code> to make assertions on actual BasketBallPlayer.
   * @param actual the BasketBallPlayer we want to make assertions on.
   */
  public BasketBallPlayerAssert(BasketBallPlayer actual) {
    super(actual, BasketBallPlayerAssert.class);
  }

  /**
   * An entry point for BasketBallPlayerAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myBasketBallPlayer)</code> and get specific assertion with code completion.
   * @param actual the BasketBallPlayer we want to make assertions on.
   * @return a new </code>{@link BasketBallPlayerAssert}</code>
   */
  public static BasketBallPlayerAssert assertThat(BasketBallPlayer actual) {
    return new BasketBallPlayerAssert(actual);
  }

  /**
   * Verifies that the actual BasketBallPlayer's assistsPerGame is equal to the given one.
   * @param assistsPerGame the given assistsPerGame to compare the actual BasketBallPlayer's assistsPerGame to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BasketBallPlayer's assistsPerGame is not equal to the given one.
   */
  public BasketBallPlayerAssert hasAssistsPerGame(int assistsPerGame) {
    // check that actual BasketBallPlayer we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("\nExpected <%s> assistsPerGame to be:\n  <%s>\n but was:\n  <%s>", actual, assistsPerGame, actual.getAssistsPerGame());
    
    // check
    if (actual.getAssistsPerGame() != assistsPerGame) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BasketBallPlayer's name is equal to the given one.
   * @param name the given name to compare the actual BasketBallPlayer's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BasketBallPlayer's name is not equal to the given one.
   */
  public BasketBallPlayerAssert hasName(Name name) {
    // check that actual BasketBallPlayer we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("\nExpected <%s> name to be:\n  <%s>\n but was:\n  <%s>", actual, name, actual.getName());
    
    // check
    if (!actual.getName().equals(name)) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BasketBallPlayer's pointsPerGame is equal to the given one.
   * @param pointsPerGame the given pointsPerGame to compare the actual BasketBallPlayer's pointsPerGame to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BasketBallPlayer's pointsPerGame is not equal to the given one.
   */
  public BasketBallPlayerAssert hasPointsPerGame(int pointsPerGame) {
    // check that actual BasketBallPlayer we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("\nExpected <%s> pointsPerGame to be:\n  <%s>\n but was:\n  <%s>", actual, pointsPerGame, actual.getPointsPerGame());
    
    // check
    if (actual.getPointsPerGame() != pointsPerGame) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BasketBallPlayer's reboundsPerGame is equal to the given one.
   * @param reboundsPerGame the given reboundsPerGame to compare the actual BasketBallPlayer's reboundsPerGame to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BasketBallPlayer's reboundsPerGame is not equal to the given one.
   */
  public BasketBallPlayerAssert hasReboundsPerGame(int reboundsPerGame) {
    // check that actual BasketBallPlayer we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("\nExpected <%s> reboundsPerGame to be:\n  <%s>\n but was:\n  <%s>", actual, reboundsPerGame, actual.getReboundsPerGame());
    
    // check
    if (actual.getReboundsPerGame() != reboundsPerGame) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BasketBallPlayer is rookie.
   * @return this assertion object.
   * @throws AssertionError - if the actual BasketBallPlayer is not rookie.
   */
  public BasketBallPlayerAssert isRookie() {
    // check that actual BasketBallPlayer we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("Expected actual BasketBallPlayer to be rookie but was not.", actual);
    
    // check
    if (!actual.isRookie()) throw new AssertionError(errorMessage);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BasketBallPlayer is not rookie.
   * @return this assertion object.
   * @throws AssertionError - if the actual BasketBallPlayer is rookie.
   */
  public BasketBallPlayerAssert isNotRookie() {
    // check that actual BasketBallPlayer we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("Expected actual BasketBallPlayer not to be rookie but was.", actual);
    
    // check
    if (actual.isRookie()) throw new AssertionError(errorMessage);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual BasketBallPlayer's team is equal to the given one.
   * @param team the given team to compare the actual BasketBallPlayer's team to.
   * @return this assertion object.
   * @throws AssertionError - if the actual BasketBallPlayer's team is not equal to the given one.
   */
  public BasketBallPlayerAssert hasTeam(String team) {
    // check that actual BasketBallPlayer we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("\nExpected <%s> team to be:\n  <%s>\n but was:\n  <%s>", actual, team, actual.getTeam());
    
    // check
    if (!actual.getTeam().equals(team)) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

}
