/**
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * Copyright 2012-2013 the original author or authors.
 */
package org.assertj.examples.data;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.api.Assertions;


/**
 * {@link Person} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PersonAssert extends AbstractAssert<PersonAssert, Person> {

  /**
   * Creates a new </code>{@link PersonAssert}</code> to make assertions on actual Person.
   * @param actual the Person we want to make assertions on.
   */
  public PersonAssert(Person actual) {
    super(actual, PersonAssert.class);
  }

  /**
   * An entry point for PersonAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myPerson)</code> and get specific assertion with code completion.
   * @param actual the Person we want to make assertions on.
   * @return a new </code>{@link PersonAssert}</code>
   */
  public static PersonAssert assertThat(Person actual) {
    return new PersonAssert(actual);
  }

  /**
   * Verifies that the actual Person's age is equal to the given one.
   * @param age the given age to compare the actual Person's age to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Person's age is not equal to the given one.
   */
  public PersonAssert hasAge(int age) {
    // check that actual Person we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("\nExpected <%s> age to be:\n  <%s>\n but was:\n  <%s>", actual, age, actual.getAge());
    
    // check
    if (actual.getAge() != age) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Person's name is equal to the given one.
   * @param name the given name to compare the actual Person's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Person's name is not equal to the given one.
   */
  public PersonAssert hasName(String name) {
    // check that actual Person we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("\nExpected <%s> name to be:\n  <%s>\n but was:\n  <%s>", actual, name, actual.getName());
    
    // check
    if (!actual.getName().equals(name)) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

}
