package com.google.common.net;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link HostAndPort} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractHostAndPortAssert<S extends AbstractHostAndPortAssert<S, A>, A extends HostAndPort> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractHostAndPortAssert}</code> to make assertions on actual HostAndPort.
   * @param actual the HostAndPort we want to make assertions on.
   */
  protected AbstractHostAndPortAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual HostAndPort's host is equal to the given one.
   * @param host the given host to compare the actual HostAndPort's host to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HostAndPort's host is not equal to the given one.
   */
  public S hasHost(String host) {
    // check that actual HostAndPort we want to make assertions on is not null.
    isNotNull();


    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting host of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    String actualHost = actual.getHost();
    if (!Objects.areEqual(actualHost, host)) {
      failWithMessage(assertjErrorMessage, actual, host, actualHost);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HostAndPort's hostText is equal to the given one.
   * @param hostText the given hostText to compare the actual HostAndPort's hostText to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HostAndPort's hostText is not equal to the given one.
   */
  public S hasHostText(String hostText) {
    // check that actual HostAndPort we want to make assertions on is not null.
    isNotNull();


    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting hostText of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    String actualHostText = actual.getHostText();
    if (!Objects.areEqual(actualHostText, hostText)) {
      failWithMessage(assertjErrorMessage, actual, hostText, actualHostText);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HostAndPort's port is equal to the given one.
   * @param port the given port to compare the actual HostAndPort's port to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HostAndPort's port is not equal to the given one.
   */
  public S hasPort(int port) {
    // check that actual HostAndPort we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting port of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    int actualPort = actual.getPort();
    if (actualPort != port) {
      failWithMessage(assertjErrorMessage, actual, port, actualPort);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HostAndPort has port.
   * @return this assertion object.
   * @throws AssertionError - if the actual HostAndPort does not have port.
   */
  public S hasPort() {
    // check that actual HostAndPort we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.hasPort()) {
      failWithMessage("\nExpecting that actual HostAndPort has port but does not have.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HostAndPort does not have port.
   * @return this assertion object.
   * @throws AssertionError - if the actual HostAndPort has port.
   */
  public S doesNotHavePort() {
    // check that actual HostAndPort we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.hasPort()) {
      failWithMessage("\nExpecting that actual HostAndPort does not have port but has.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HostAndPort has bracketless colons.
   * @return this assertion object.
   * @throws AssertionError - if the actual HostAndPort does not have bracketless colons.
   */
  public S hasBracketlessColons() {
    // check that actual HostAndPort we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("hasBracketlessColons", Boolean.class, actual)) {
      failWithMessage("\nExpecting that actual HostAndPort has bracketless colons but does not have.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual HostAndPort does not have bracketless colons.
   * @return this assertion object.
   * @throws AssertionError - if the actual HostAndPort has bracketless colons.
   */
  public S doesNotHaveBracketlessColons() {
    // check that actual HostAndPort we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("hasBracketlessColons", Boolean.class, actual)) {
      failWithMessage("\nExpecting that actual HostAndPort does not have bracketless colons but has.");
    }

    // return the current assertion for method chaining
    return myself;
  }

}
