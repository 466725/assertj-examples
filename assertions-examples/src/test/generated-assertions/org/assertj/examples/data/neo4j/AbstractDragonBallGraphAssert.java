package org.assertj.examples.data.neo4j;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link DragonBallGraph} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractDragonBallGraphAssert<S extends AbstractDragonBallGraphAssert<S, A>, A extends DragonBallGraph> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractDragonBallGraphAssert}</code> to make assertions on actual DragonBallGraph.
   * @param actual the DragonBallGraph we want to make assertions on.
   */
  protected AbstractDragonBallGraphAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual DragonBallGraph's cypherEngine is equal to the given one.
   * @param cypherEngine the given cypherEngine to compare the actual DragonBallGraph's cypherEngine to.
   * @return this assertion object.
   * @throws AssertionError - if the actual DragonBallGraph's cypherEngine is not equal to the given one.
   */
  public S hasCypherEngine(org.neo4j.cypher.javacompat.ExecutionEngine cypherEngine) {
    // check that actual DragonBallGraph we want to make assertions on is not null.
    isNotNull();


    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting cypherEngine of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    org.neo4j.cypher.javacompat.ExecutionEngine actualCypherEngine = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("cypherEngine", org.neo4j.cypher.javacompat.ExecutionEngine.class, actual);
    if (!Objects.areEqual(actualCypherEngine, cypherEngine)) {
      failWithMessage(assertjErrorMessage, actual, cypherEngine, actualCypherEngine);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual DragonBallGraph's graphDB is equal to the given one.
   * @param graphDB the given graphDB to compare the actual DragonBallGraph's graphDB to.
   * @return this assertion object.
   * @throws AssertionError - if the actual DragonBallGraph's graphDB is not equal to the given one.
   */
  public S hasGraphDB(org.neo4j.graphdb.GraphDatabaseService graphDB) {
    // check that actual DragonBallGraph we want to make assertions on is not null.
    isNotNull();


    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting graphDB of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    org.neo4j.graphdb.GraphDatabaseService actualGraphDB = org.assertj.core.util.introspection.FieldSupport.EXTRACTION.fieldValue("graphDB", org.neo4j.graphdb.GraphDatabaseService.class, actual);
    if (!Objects.areEqual(actualGraphDB, graphDB)) {
      failWithMessage(assertjErrorMessage, actual, graphDB, actualGraphDB);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
