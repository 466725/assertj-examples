package org.assertj.examples.data.service;

import org.assertj.core.api.AbstractAssert;
import org.assertj.examples.data.BasketBallPlayer;


/**
 * Abstract base class for {@link TeamManager} specific assertions - Generated by CustomAssertionGenerator.
 */
public abstract class AbstractTeamManagerAssert<S extends AbstractTeamManagerAssert<S, A>, A extends TeamManager> extends AbstractAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractTeamManagerAssert}</code> to make assertions on actual TeamManager.
   * @param actual the TeamManager we want to make assertions on.
   */
  protected AbstractTeamManagerAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual TeamManager's players contains the given BasketBallPlayer elements.
   * @param players the given elements that should be contained in actual TeamManager's players.
   * @return this assertion object.
   * @throws AssertionError if the actual TeamManager's players does not contain all given BasketBallPlayer elements.
   */
  public S hasPlayers(BasketBallPlayer... players) {
    // check that actual TeamManager we want to make assertions on is not null.
    isNotNull();

    // check that given BasketBallPlayer varargs is not null.
    if (players == null) throw new AssertionError("Expecting players parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    org.assertj.core.internal.Iterables.instance().assertContains(info, actual.getPlayers(), players);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual TeamManager has no players.
   * @return this assertion object.
   * @throws AssertionError if the actual TeamManager's players is not empty.
   */
  public S hasNoPlayers() {
    // check that actual TeamManager we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have players but had :\n  <%s>";
    
    // check
    if (actual.getPlayers().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getPlayers());
    }
    
    // return the current assertion for method chaining
    return myself;
  }
  

}
